# =========================
# Step 1: Install & Import
# =========================
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

# =========================
# Step 2: Load Data
# =========================
# If running in Colab, upload file first:
# from google.colab import files
# uploaded = files.upload()

file_path = "clean pd cancer data.xlsx"  # update if different
df = pd.read_excel(file_path, sheet_name="Sheet1")

# =========================
# Step 3: Prepare Features & Labels
# =========================
# Hidden numerical features = columns 11 to 59 (Python index 11:60)
X = df.iloc[:, 11:60]

# Encode output labels
le = LabelEncoder()
y = le.fit_transform(df["LABEL"])  # DRIVER / PASSENGER â†’ 0/1

# =========================
# Step 4: Train-Test Split
# =========================
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# =========================
# Step 5: Scale Features
# =========================
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# =========================
# Step 6: Train SVM
# =========================
svm_model = SVC(kernel="rbf", probability=True, random_state=42)
svm_model.fit(X_train_scaled, y_train)

# =========================
# Step 7: Evaluate Model
# =========================
y_pred = svm_model.predict(X_test_scaled)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=le.classes_))

# =========================
# Step 8: Test on New Gene (Optional)
# =========================
# Example: get prediction for the 1st gene row
sample_features = X.iloc[0:1]
sample_scaled = scaler.transform(sample_features)
pred_label = le.inverse_transform(svm_model.predict(sample_scaled))
print(f"\nPredicted label for {df['Gene'].iloc[0]} mutation: {pred_label[0]}")
